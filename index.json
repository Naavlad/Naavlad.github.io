[{"categories":["Linux"],"contents":"Как пользоваться утилитой Screen на Debian, Ubunt и их производных. Screen - терминальный мультиплексор. Дает возможность внутри действующей сессии открыть много виртуальных терминалов. Процесс, запущенный внутри сессии через screen, будет продолжаться после отключения от сессии.\nНа некоторых системах пакет screen может быть уже установлен,\nscreen --version Screen version 4.09.00 (GNU) 30-Jan-22 а если нет, то устанавливается он самым обычным способом.\nsudo apt install screen Запуск screen Создастся новая сессия программы и появится приветственное сообщение. Для его закрытия нужно нажать Space или Enter.\nСоздать сессию с именем\nscreen -S \u0026lt;имя сессии\u0026gt; Cписок доступных команд:\nCtrl+a и ? Все управляющие команды начинаются с комбинации клавиш Ctrl + a, затем следует буква или сочетание клавиш.\nБуквы разных регистров выполняют разные команды.\nCоздать новое окно Ctrl+a и c\nПросмотр списка созданных Ctrl + a и w Переключиться на окно с номером 2 Ctrl+a и 2\nПереименовать текущее окно Ctrl+a и A\nРазделить окно по горизонтали Ctrl+a и S\nРазделить окно по вертикали Ctrl+a  и |\nПереключить фокус на следующую область разделенного окна Ctrl+a и tab\nСкрыть все окна и оставить только текущее Ctrl+a и Q\nЗакрыть текущую область Ctrl+a и X\nCкрыть все окна сессии Ctrl + a и \\. Подтвердите решение нажатием y\nВыйти из screen Ctrl + a и d\nЗапущеннй процесс не остановится и будет продолжать свое выполнение. Если сессия одна, что бы в нее вернуться достаточно\nscreen -r Чтобы перейти в нужную сессию следует указать параметру -r её id или название.\nscreen -r 34566 Посмотреть список запущенных сессий\nscreen -ls ","date":"December 27, 2022","hero":"/posts/linux/screen/hero.jpg","permalink":"https://naavlad.ru/posts/linux/screen/","summary":"Как пользоваться утилитой Screen на Debian, Ubunt и их производных. Screen - терминальный мультиплексор. Дает возможность внутри действующей сессии открыть много виртуальных терминалов. Процесс, запущенный внутри сессии через screen, будет продолжаться после отключения от сессии.\nНа некоторых системах пакет screen может быть уже установлен,\nscreen --version Screen version 4.09.00 (GNU) 30-Jan-22 а если нет, то устанавливается он самым обычным способом.\nsudo apt install screen Запуск screen Создастся новая сессия программы и появится приветственное сообщение.","tags":["linux","screen"],"title":"Утилита Screen в Linux"},{"categories":["Linux"],"contents":"Одна из самых популярных командных оболочек — это оболочка Bash (Bourne Again Shell).\nОна используется по умолчанию в большинстве дистрибутивов Linux.\nПосмотреть командную оболочку у пользователя(у разных пользователей могут использоваться разные командные оболочки) можно разными способами.\nВ переменной окружения. Переменная окружения SHELL хранит путь до исполняемого файла оболочки.\necho $SHELL /usr/bin/zsh # для zsh /usr/bin/bash # для bash Через имя текущего работающего процесса Командой echo $0 входит в POSIX standards compliant shells . Данная команда выведет на экран имя текущего работающего процесса, внутри которого она выполнена.\nЕсли строка начинается с дефиса -, -bash то она работает как оболочка входа в систему, если нет, как интерактивная оболочка.\necho $0 -zsh echo $0 /usr/bin/zsh Определим, работающий процесс оболочки. ps -p $$ PID TTY TIME CMD 2616 pts/9 00:00:00 bash Cписок оболочек, доступных в системе Список оболочек системы хранится в файле /etc/shells\ncat /etc/shells # /etc/shells: valid login shells /bin/sh /bin/bash /bin/dash /bin/fish /bin/zsh Чтобы переключиться на другую оболочку, достаточно выполнить в терминале команду, соответствующую ее имени например zsh.\nДля изменения командной оболочки на постоянной основе служит команда chsh (от слов change shell) Чтобы изменить оболочку текущего пользователя нужно выполнить команду:\nchsh -s path В качестве параметра path необходимо указать путь до исполняемого файла оболочки, который вы можете найти в файле /etc/shells (см. выше).\nchsh -s /bin/sh После этого нужно выйти и снова войти в систему.\nЧтобы изменить оболочку, используемую по умолчанию, для другого пользователя, то команде chsh необходимо указать имя этого пользователя:\nchsh -s /bin/sh username ","date":"December 16, 2022","hero":"/posts/linux/change-shell/hero.png","permalink":"https://naavlad.ru/posts/linux/change-shell/","summary":"Одна из самых популярных командных оболочек — это оболочка Bash (Bourne Again Shell).\nОна используется по умолчанию в большинстве дистрибутивов Linux.\nПосмотреть командную оболочку у пользователя(у разных пользователей могут использоваться разные командные оболочки) можно разными способами.\nВ переменной окружения. Переменная окружения SHELL хранит путь до исполняемого файла оболочки.\necho $SHELL /usr/bin/zsh # для zsh /usr/bin/bash # для bash Через имя текущего работающего процесса Командой echo $0 входит в POSIX standards compliant shells .","tags":["linux","shell"],"title":"Как изменить shell в Linux"},{"categories":["Hugo websites"],"contents":"Что такое таксономия? Таксоно́мия - Математически таксономией является древообразная структура классификаций определённого набора объектов.\nHugo включает поддержку определяемых пользователем групп контента, называемых таксономиями. Таксономии — это классификации логических отношений между контентом.\nTaxonomy - категоризация, которую можно использовать для классификации контента.\nTerm - ключ таксономии.\nValue - часть контента, по ключу Term\nПример таксономии: веб-сайт фильма Предположим, вы делаете сайт о фильмах. Вы можете включить следующие таксономии:\n Actors Directors Studios Genre Year Awards  Затем в каждом из фильмов вы должны указать термины для каждой из этих таксономий (т. е. во определении каждого из ваших файлов контента фильма). На основе этих условий Hugo автоматически создаст страницы для каждого актера, режиссера, студии, жанра, года и награды, на каждой из которых перечислялись все фильмы, соответствующие этому конкретному актеру, режиссеру, студии, жанру, году и награде.\nС точки зрения контента это выглядело бы иначе, хотя метки остаются прежними:\nЗначения по умолчанию (Hugo Taxonomy Defaults). Hugo natively поддерживает таксономии.\nНе добавляя ни одной строки в файл конфигурации вашего сайта, Hugo автоматически создаст таксономию для тегов и категорий. Это будет то же самое, что и ручная настройка таксономий, как показано ниже:\n[taxonomies] category = \u0026#39;categories\u0026#39; tag = \u0026#39;tags\u0026#39; Если вам не нужны таксономии, их можно отключить.\n# config disableKinds = [\u0026#39;taxonomy\u0026#39;, \u0026#39;term\u0026#39;] home - Домашняя страница - (/index.html)\npage - - Текущая страница - my-post page (/posts/my-post/index.html)\nsection - - Страница раздела - posts section (/posts/index.html)\ntaxonomy - - Страница для таксономии - tags taxonomy (/tags/index.html)\nterm - - Страница по ключу - term awesome in tags taxonomy (/tags/awesome/index.html)\nРасположение по умолчанию. Hugo автоматически создает как страницу со списком всех терминов таксономии, так и отдельные страницы со списками контента, связанными с каждым термином.\nНапример, таксономия категорий, объявленная в вашей конфигурации и используемая во конфигурации вашего контента, создаст следующие страницы:\n Одна страница по адресу example.com/categories/, на которой перечислены все термины в таксономии. Отдельные страницы со списком таксономии (например, /categories/development/) для каждого термина, который показывает список всех страниц, помеченных как часть этой таксономии, в конфигурации любого файла.  Конфигурация. Пользовательские таксономии, отличные от стандартных, должны быть определены в конфигурации вашего сайта.\nДля каждой таксономии необходимо указать метки:\n ключ в единственном числе = \u0026ldquo;значение во множественном числе\u0026rdquo;  [taxonomies] category = \u0026#39;categories\u0026#39; series = \u0026#39;series\u0026#39; tag = \u0026#39;tags\u0026#39; Изменение дефолтных значений. Если вы хотите иметь только таксономию тегов по умолчанию и удалить таксономию категорий для своего сайта, вы можете сделать это, изменив значение таксономии в конфигурации вашего сайта.\n[taxonomies] tag = \u0026#39;tags\u0026#39; Добавление контента таксономии. Как только таксономия определена на уровне сайта, ей можно назначить любой фрагмент контента, независимо от типа контента или раздела контента. Присвоение содержания таксономии выполняется в конфигурации. Просто создайте переменную с именем таксономии во множественном числе и назначьте все термины, которые вы хотите применить к экземпляру типа контента.\nExample: categories = [\u0026#39;Development\u0026#39;] project_url = \u0026#39;https://github.com/gohugoio/hugo\u0026#39; series = [\u0026#39;Go Web Dev\u0026#39;] slug = \u0026#39;hugo\u0026#39; tags = [\u0026#39;Development\u0026#39;, \u0026#39;Go\u0026#39;, \u0026#39;fast\u0026#39;, \u0026#39;Blogging\u0026#39;] title = \u0026#39;Hugo: A fast and flexible static site generator\u0026#39; Добавить пользовательские метаданные. Если вам нужно добавить пользовательские метаданные к вашим терминам таксономии, вам нужно будет создать страницу для этого термина в /content///_index.md и добавить свои метаданные во вступительную часть. Продолжая наш пример «Актеры», допустим, вы хотите добавить ссылку на страницу Википедии для каждого актера. Ваши страницы условий будут выглядеть примерно так:\n/content/actors/bruce-willis/_index.md\n--- title: \u0026#34;Bruce Willis\u0026#34; wikipedia: \u0026#34;https://en.wikipedia.org/wiki/Bruce_Willis\u0026#34; --- Оригинал страницы Taxonomies.\n","date":"December 13, 2022","hero":"/posts/hugo/templates/taxonomies/hero.png","permalink":"https://naavlad.ru/posts/hugo/templates/taxonomies/","summary":"Что такое таксономия? Таксоно́мия - Математически таксономией является древообразная структура классификаций определённого набора объектов.\nHugo включает поддержку определяемых пользователем групп контента, называемых таксономиями. Таксономии — это классификации логических отношений между контентом.\nTaxonomy - категоризация, которую можно использовать для классификации контента.\nTerm - ключ таксономии.\nValue - часть контента, по ключу Term\nПример таксономии: веб-сайт фильма Предположим, вы делаете сайт о фильмах. Вы можете включить следующие таксономии:\n Actors Directors Studios Genre Year Awards  Затем в каждом из фильмов вы должны указать термины для каждой из этих таксономий (т.","tags":["hugo","taxonomies"],"title":"Таксоно́мия в Hugo(Taxonomies)."},{"categories":["Hugo websites"],"contents":"Домашняя страница веб-сайта часто форматируется иначе, чем другие страницы. По этой причине Hugo позволяет легко определить домашнюю страницу сайта как уникальный шаблон.\n Шаблон домашней страницы — это единственный шаблон, необходимый для создания сайта. Это также единственный необходимый шаблон, если вы разрабатываете одностраничный веб-сайт.\n Домашняя страница, как и другие страницы в Hugo, принимает содержимое и front matter из файла _index.md. Этот файл должен находиться в корне папки с вашим содержимым (например, content/_index.md). Затем вы можете добавить основную копию и метаданные на свою домашнюю страницу так же, как и любой другой файл контента.\nПример с использованием partial, base templates, и контента из content/_index.md с использованием {{.Title}} и {{.Content}} переменными стрницы (.Page).\n#layouts/index.html\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;main aria-role=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;header class=\u0026#34;homepage-header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{{.Title}}\u0026lt;/h1\u0026gt; {{ with .Params.subtitle }} \u0026lt;span class=\u0026#34;subtitle\u0026#34;\u0026gt;{{.}}\u0026lt;/span\u0026gt; {{ end }} \u0026lt;/header\u0026gt; \u0026lt;div class=\u0026#34;homepage-content\u0026#34;\u0026gt; \u0026lt;!-- Note that the content for index.html, as a sort of list page, will pull from content/_index.md --\u0026gt; {{.Content}} \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; {{ range first 10 .Site.RegularPages }} {{ .Render \u0026#34;summary\u0026#34;}} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; {{ end }} Оригинал страницы Homepage Template.\n","date":"December 13, 2022","hero":"/posts/hugo/templates/homepage/hero.png","permalink":"https://naavlad.ru/posts/hugo/templates/homepage/","summary":"Домашняя страница веб-сайта часто форматируется иначе, чем другие страницы. По этой причине Hugo позволяет легко определить домашнюю страницу сайта как уникальный шаблон.\n Шаблон домашней страницы — это единственный шаблон, необходимый для создания сайта. Это также единственный необходимый шаблон, если вы разрабатываете одностраничный веб-сайт.\n Домашняя страница, как и другие страницы в Hugo, принимает содержимое и front matter из файла _index.md. Этот файл должен находиться в корне папки с вашим содержимым (например, content/_index.","tags":["hugo","theme","blog"],"title":"Домашняя страница(Homepage Template)."},{"categories":["Hugo websites"],"contents":"Ведение После переезда блога, я решил поменять тему, когда еще представится такая возможность без поиска всяких поводов. Хотелось найти максимально простую, но достаточно интересную по оформлению. Перепробовал неслоколько тем, очень достойно сделаных, и решил сделать свою, благо давно уже у меня лежит купленный на бустрапе фронт.\nОб аналитике Но начать я хочу, как не странно, с SEO, c аналитики гугла и яндекса, даже для небольшого блога, я считаю ее необходимо настраивать, просто для себя.\nСначала про Файл robots.txt, он же стандарт исключений для роботов — это текстовый файл, в котором хранятся определенные указания для роботов поисковых систем. Прежде, чем сайт попадает в поисковую выдачу и занимает там определенное место, его исследуют роботы. Именно они передают информацию поисковым системам, и далее ваш ресурс отображается в поисковой строке. Robots.txt выполняет важную функцию — он может защитить весь сайт или некоторые его разделы от индексации. Особенно это актуально для интернет-магазинов и других ресурсов, через которые совершаются онлайн-оплаты. Вам же не хочется, чтобы кредитные счета ваших клиентов вдруг стали известны всему интернету? Для этого и существует файл robots.txt.\nС аналитикой гугла и яндекса все просто, при установке счетчика в HTML-код сайта, необходимо разместить код как можно ближе к началу страницы. Например, в пределах тега или , так написано в настройках.\nЯ убрал все лишние настройки, мне они точно не понадобятся, а загромождение кода и настроек лишним и ненужным мне не нравятся.\nВот, в общем, и все. Для первичной настройки, для получения статистики достаточно. О преимуществах обох систем можно долго рассуждать, но зачем, пользуйтесь тем, что больше подходит для ваших задач или, что больше нравится.\nСликом много кода Неожиданностью для меня стал очень большой обьем кода в теме, которую я выбрал для переработки. Конечно же я понимаю, что любая \u0026ldquo;не личная\u0026rdquo; тема содержит и должна содержать много настроек, но в выбронной теме количество этих настроек было какимто запредельно излишним.\n","date":"December 9, 2022","hero":"/images/default-hero.jpg","permalink":"https://naavlad.ru/posts/hugo/theme-rebuilding/","summary":"Ведение После переезда блога, я решил поменять тему, когда еще представится такая возможность без поиска всяких поводов. Хотелось найти максимально простую, но достаточно интересную по оформлению. Перепробовал неслоколько тем, очень достойно сделаных, и решил сделать свою, благо давно уже у меня лежит купленный на бустрапе фронт.\nОб аналитике Но начать я хочу, как не странно, с SEO, c аналитики гугла и яндекса, даже для небольшого блога, я считаю ее необходимо настраивать, просто для себя.","tags":["hugo","theme","blog"],"title":"Переработка и изменение темы hugo. Аналитика."},{"categories":null,"contents":"Разрабатываю Rest API для веб-приложений и сервисов на python.\nНастраиваю инфраструктуру для веб-проектов.\nПомогаю бизнесу развиваться 💰, а пользователям — становиться счастливее 🎁.\nВ прошлой жизни руководил направлением FMCG. Организовывал Бизнесс-процессы предприятия, постоил с нуля систему KPI, провел сертификацию ISO 9001 и перестроил систему кредитования.\nНачиная с 2008г. стал изучать сложные финансовые инструменты и торговать на площадках NYSE, NASDAQ. Увлечение переросло в нечто большее и продолжилось построением сложных опционных позиций на NYSE, NASDAQ, CME. Потом автоматизация торговых систем FORTS, арбитраж, хеджирование, risk management. MOEX был первым шагом, потом перешел на CME, далее на NYSE, NASDAQ.\nИмею большой опыт работы вне IT компаний, понимаю потребности потребителей софта, понимаю разницу в точках зрения со стороны потребителя и разработчика. Знаю, понимаю, применяю SMART и KPI. Большой опыт переговоров и стрессоустойчивость. Легко нахожу контакт с коллективом. Техники Time management Максима Дорофеева – это еще одна моя настольная книга, легко, эффективно и органично.\nОдин из последних проектов разрабатывали, используя микросервисную архитектуру, прогнозирование вероятности событий на основании ML модели в игровых приложениях.\nПробую использовать в новых проектах Golang.\n","date":"December 8, 2022","hero":"/images/default-hero.jpg","permalink":"https://naavlad.ru/abouts/about-me/","summary":"Разрабатываю Rest API для веб-приложений и сервисов на python.\nНастраиваю инфраструктуру для веб-проектов.\nПомогаю бизнесу развиваться 💰, а пользователям — становиться счастливее 🎁.\nВ прошлой жизни руководил направлением FMCG. Организовывал Бизнесс-процессы предприятия, постоил с нуля систему KPI, провел сертификацию ISO 9001 и перестроил систему кредитования.\nНачиная с 2008г. стал изучать сложные финансовые инструменты и торговать на площадках NYSE, NASDAQ. Увлечение переросло в нечто большее и продолжилось построением сложных опционных позиций на NYSE, NASDAQ, CME.","tags":null,"title":"Коротко о себе"},{"categories":[],"contents":"If you haven\u0026rsquo;t already run\ngit rm --cached path_to_submodule # no trailing slash as well as rm -rf path_to_submodule Then:\nDelete the relevant lines from the .gitmodules file. e.g. delete these:\n[submodule \u0026#34;path_to_submodule\u0026#34;] path = path_to_submodule url = https://github.com/path_to_submodule Delete the relevant section from .git/config. e.g. delete these:\n[submodule \u0026#34;path_to_submodule\u0026#34;] url = https://github.com/path_to_submodule rm -rf .git/modules/path_to_submodule git submodule add https://github.com/path_to_submodule ","date":"December 7, 2022","hero":"/images/default-hero.jpg","permalink":"https://naavlad.ru/notes/git-submodule-add-git-directory-is-found-locally/","summary":"If you haven\u0026rsquo;t already run\ngit rm --cached path_to_submodule # no trailing slash as well as rm -rf path_to_submodule Then:\nDelete the relevant lines from the .gitmodules file. e.g. delete these:\n[submodule \u0026#34;path_to_submodule\u0026#34;] path = path_to_submodule url = https://github.com/path_to_submodule Delete the relevant section from .git/config. e.g. delete these:\n[submodule \u0026#34;path_to_submodule\u0026#34;] url = https://github.com/path_to_submodule rm -rf .git/modules/path_to_submodule git submodule add https://github.com/path_to_submodule ","tags":["Git"],"title":"Git Submodule: 'add git directory is found locally'"},{"categories":[],"contents":"That error means that projectfolder is already staged (\u0026ldquo;already exists in the index\u0026rdquo;). To find out what\u0026rsquo;s going on here, try to list everything in the index under that folder with:\ngit ls-files --stage projectfolder The first column of that output will tell you what type of object is in the index at projectfolder. (These look like Unix filemodes, but have special meanings in git.)\nI suspect that you will see something like:\n160000 d00cf29f23627fc54eb992dde6a79112677cd86c 0 projectfolder (i.e. a line beginning with 160000), in which case the repository in projectfolder has already been added as a \u0026ldquo;gitlink\u0026rdquo;. If it doesn\u0026rsquo;t appear in the output of git submodule, and you want to re-add it as a submodule, you can do:\ngit rm --cached projectfolder \u0026hellip; to unstage it, and then:\ngit submodule add url_to_repo projectfolder \u0026hellip; to add the repository as a submodule.\nHowever, it\u0026rsquo;s also possible that you will see many blobs listed (with file modes 100644 and 100755), which would suggest to me that you didn\u0026rsquo;t properly unstage the files in projectfolder before copying the new repository into place. If that\u0026rsquo;s the case, you can do the following to unstage all of those files:\ngit rm -r --cached projectfolder \u0026hellip; and then add the submodule with:\ngit submodule add url_to_repo projectfolder ","date":"December 7, 2022","hero":"/images/default-hero.jpg","permalink":"https://naavlad.ru/notes/git-submodule-already-exists-in-index/","summary":"That error means that projectfolder is already staged (\u0026ldquo;already exists in the index\u0026rdquo;). To find out what\u0026rsquo;s going on here, try to list everything in the index under that folder with:\ngit ls-files --stage projectfolder The first column of that output will tell you what type of object is in the index at projectfolder. (These look like Unix filemodes, but have special meanings in git.)\nI suspect that you will see something like:","tags":["Git"],"title":"Git submodule: 'already exists in the index'"},{"categories":["Hugo websites"],"contents":"С момента последнего переезда этого блога прошло два года.\nЗа это время перепробовал несколько основных CMS, потом я написал свой блог на Django с Vue.js и смог убедится, что переход на свою конфигурацию никак не помог ведению блога и написанию постов, но даже имел противоположный эффект.\nСтранно, что такая технология прошла мимо моего внимания, точнее, в какой то момент, была отвергнута в пользу других вариантов.\nВесь блог теперь живет на github.\nДа, я был неправ, когда в ответ на предложения “просто использовать hugo”, хотел что то более сложное.\n","date":"December 2, 2022","hero":"/posts/hugo/moving-blog/hero.png","permalink":"https://naavlad.ru/posts/hugo/moving-blog/","summary":"С момента последнего переезда этого блога прошло два года.\nЗа это время перепробовал несколько основных CMS, потом я написал свой блог на Django с Vue.js и смог убедится, что переход на свою конфигурацию никак не помог ведению блога и написанию постов, но даже имел противоположный эффект.\nСтранно, что такая технология прошла мимо моего внимания, точнее, в какой то момент, была отвергнута в пользу других вариантов.\nВесь блог теперь живет на github.","tags":["hugo","blog","разное"],"title":"Переезд блога, возможно окончательный."}]