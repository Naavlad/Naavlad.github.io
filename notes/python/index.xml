<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python Notes on naavlad.ru</title>
    <link>https://naavlad.ru/notes/python/</link>
    <description>Recent content in Python Notes on naavlad.ru</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://naavlad.ru/notes/python/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Python Variables</title>
      <link>https://naavlad.ru/notes/python/basics/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://naavlad.ru/notes/python/basics/variables/</guid>
      <description>Creating Variable Python has no command for declaring a variable. A variable is created the moment you first assign a value to it.
x = 5 y = &amp;#34;John&amp;#34; print(x) print(y)     Dynamic Type Variables do not need to be declared with any particular type, and can even change type after they have been set.
x = 4 # x is of type int x = &amp;#34;Sally&amp;#34; # x is now of type str     Casting x = str(3) # x will be &amp;#39;3&amp;#39; y = int(3) # y will be 3 z = float(3) # z will be 3.</description>
    </item>
    
    <item>
      <title>Python Data Types</title>
      <link>https://naavlad.ru/notes/python/basics/data_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://naavlad.ru/notes/python/basics/data_types/</guid>
      <description>Built-in Data Types | Category | Built-in Data Types | |        &amp;ndash; |                       | | Text Type | str | | Numeric Types | int, float, complex | | Sequence Types | list, tuple, range | | Mapping Type | dict | | Set Types | set, frozenset | | Boolean Type | bool | | Binary Types | bytes, bytearray, memoryview |      Get Type of a Variable Print the data type of the variable x:</description>
    </item>
    
    <item>
      <title>Декораторы</title>
      <link>https://naavlad.ru/notes/python/basics/decorators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://naavlad.ru/notes/python/basics/decorators/</guid>
      <description>Декоратор Декоратор — это функция, которая позволяет обернуть другую функцию для расширения её функциональности без непосредственного изменения её кода.
def decorator_function(func): def wrapper(): print(&amp;#39;Функция-обёртка!&amp;#39;) print(&amp;#39;Оборачиваемая функция: {}&amp;#39;.format(func)) print(&amp;#39;Выполняем обёрнутую функцию...&amp;#39;) func() print(&amp;#39;Выходим из обёртки&amp;#39;) return wrapper     Декоратор &amp;#39;время выполнения&amp;#39;. import time from datetime import datetime def check_time(func): def wrapper(): time_start = datetime.now() func() time = datetime.now() - time_start print(f&amp;#34;Время выполнения: {time}&amp;#34;) return wrapper @check_time def foo(): time.</description>
    </item>
    
    
  </channel>
</rss>
